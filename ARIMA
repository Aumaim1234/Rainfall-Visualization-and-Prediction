from dateutil.parser import parse
import matplotlib as mpl
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import pandas as pd
import statsmodels.formula.api as smf
import statsmodels.api as sm
import matplotlib.pyplot as plt
from datetime import datetime
from statsmodels.tsa.stattools import adfuller
from sklearn.metrics import mean_squared_error

#add data file
df = pd.read_csv('/content/sample_data/rainfall2-transpost.csv')
print('Shape of data',df.shape)
df=df.set_index(['Year'])

from statsmodels.tsa.stattools import acf, pacf
thAcf = acf(df['Ubon Ratchathani'], nlags=4)
thPacf = pacf(df['Ubon Ratchathani'], nlags=4, method='ols')

#stationary test#
from statsmodels.tsa.stattools import adfuller
def adf_test(df):
     dftest = adfuller(df, autolag = 'AIC')
     print("1. ADF : ",dftest[0])
     print("2. P-Value : ", dftest[1])
     print("3. Num Of Lags : ", dftest[2])
     print("4. Num Of Observations Used For ADF Regression:", dftest[3])
     print("5. Critical Values :")
     for key, val in dftest[4].items():
         print("\t",key, ": ", val)
province=list()
for i in range(len(df.columns)):
  P=adf_test(df.iloc[:,i])
  if P<0.05:
    province.append(i)
print(province)   
# p <0.05; data stationary
# p> 0.05; data non-stationary

#find province index which best arima not (0,0,0)
from pmdarima import auto_arima
for i in province:
  stepwise_fit = auto_arima(df.iloc[:,i], trace=True,
  suppress_warnings=True)
  print(i)

#print index to see their province
print(df.iloc[:,21])
print(df.iloc[:,53])
print(df.iloc[:,55])  

from statsmodels.tsa.arima_model import ARIMA
import numpy as np

#ARIMA 2 0 0
model = ARIMA(df.Satun, order=(2,0,0))
model_fit = model.fit(disp=0)
model_fit.plot_predict(dynamic=False)
plt.show()

#ARIMA 1 0 0
model1 = ARIMA(df.Satun, order=(1,0,0))
model_fit1 = model1.fit(disp=0)
print(model_fit1.summary())
model_fit1.plot_predict(dynamic=False)
plt.show()

###RSME ARIMA not best
train_series=df["Satun"].values
train_size = int(len(train_series) * 0.7)
x_train, x_test = train_series[0:train_size], train_series[train_size:]
print('Train Set Lenght:',len(x_train))
print('Test Set Lenght:',len(x_test))
# walk-forward validation
history = [i for i in x_train]
predictions = list()

#check arima not best
for i in range(len(x_test)):
  # predict
  model = ARIMA(history, order=(1,0,0))
  model_fit = model.fit(disp=0)
  #y_pred=model_fit.predict(start=len(train), end=len(train)+len(test)-1, dynamic=False)
  y_pred = model_fit.forecast()[0]
  predictions.append(y_pred)
  #observation
  test_obs = x_test[i]
  history.append(test_obs)
  print('>Predicted=%.3f, Expected=%3.f' % (y_pred, test_obs))
  import math
  
# report performance
rmse = math.sqrt(mean_squared_error(x_test, predictions))
print('RMSE: %.3f' % rmse)
  
#check arima best
###RSME ARIMA best
train_series=df["Satun"].values
train_size = int(len(train_series) * 0.7)
x_train, x_test = train_series[0:train_size], train_series[train_size:]
print('Train Set Lenght:',len(x_train))
print('Test Set Lenght:',len(x_test))
# walk-forward validation
history = [i for i in x_train]
predictions = list()

for i in range(len(x_test)):
  # predict เปลี่ยน ARIMA ตรงนี้
  model = ARIMA(history, order=(2,0,0))
  model_fit = model.fit(disp=0)
  #y_pred=model_fit.predict(start=len(train), end=len(train)+len(test)-1, dynamic=False)
  y_pred = model_fit.forecast()[0]
  predictions.append(y_pred)
  #observation
  test_obs = x_test[i]
  history.append(test_obs)
  print('>Predicted=%.3f, Expected=%3.f' % (y_pred, test_obs))
  
# report performance
rmse = math.sqrt(mean_squared_error(x_test, predictions))
print('RMSE: %.3f' % rmse) 

#plot fprecasted
forecasts,SE,Interval=model_fit.forecast(steps=3,alpha=0.05)
model_fit.plot_predict(0,12, alpha=0.05,plot_insample=True)
x = model_fit.forecast(steps=3)
plt.plot(linewidth=1, legend=True)
positions = (0,1, 2, 3,4,5,6,7,8,9,10,11,12)
labels = ("2011", "2012", "2013","2014","2015","2016","2017","2018","2019","2020","2021","2022","2023")
plt.xticks(positions, labels,rotation=270)
plt.ylabel('Rainfall per year (millimetre)')
plt.xlabel('Number of year start 2011 to 2023')
plt.show()
